import pytesseract
import easyocr
from PIL import Image
from pathlib import Path
from config import OCR_LANGUAGES_TESSERACT, OCR_LANGUAGES_EASYOCR

class OCRProcessor:
    """This class reads text from document images - MINIMAL VERSION"""
    
    def __init__(self, use_tesseract=True, use_easyocr=True, use_paddle=False):
        # Only use Tesseract and EasyOCR for now
        self.use_tesseract = use_tesseract
        self.use_easyocr = use_easyocr
        self.use_paddle = False  # Disabled for now
        
        # Store OCR tools
        self._easyocr_reader = None

    def _get_easyocr(self):
        """Load EasyOCR if not already loaded"""
        if self._easyocr_reader is None:
            self._easyocr_reader = easyocr.Reader(OCR_LANGUAGES_EASYOCR)
        return self._easyocr_reader

    def tesseract_ocr(self, image_path):
        """Read text using Tesseract OCR"""
        try:
            # Open image with PIL instead of OpenCV
            image = Image.open(image_path)
            
            # Convert to RGB if needed
            if image.mode != 'RGB':
                image = image.convert('RGB')
            
            # Set up Tesseract for English and Hindi
            lang_string = '+'.join(OCR_LANGUAGES_TESSERACT)  # eng+hin
            config = r'--oem 3 --psm 6'
            
            # Extract text
            text = pytesseract.image_to_string(image, lang=lang_string, config=config)
            return {"text": text.strip(), "confidence": 0.8}
        except Exception as e:
            return {"text": "", "confidence": 0.0, "error": str(e)}

    def easyocr_extract(self, image_path):
        """Read text using EasyOCR"""
        try:
            reader = self._get_easyocr()
            result = reader.readtext(str(image_path))
            
            # Combine all found text
            full_text = ""
            total_confidence = 0.0
            count = 0
            
            for (_, text, conf) in result:
                full_text += text + " "
                total_confidence += float(conf)
                count += 1
            
            # Calculate average confidence
            avg_confidence = (total_confidence / count) if count else 0.0
            return {"text": full_text.strip(), "confidence": avg_confidence}
        except Exception as e:
            return {"text": "", "confidence": 0.0, "error": str(e)}

    def process_document(self, image_path):
        """Use available OCR tools and pick the best result"""
        image_path = Path(image_path)
        results = {}
        
        # Try each OCR tool if enabled
        if self.use_tesseract:
            results["tesseract"] = self.tesseract_ocr(image_path)
        if self.use_easyocr:
            results["easyocr"] = self.easyocr_extract(image_path)
        
        if not results:
            return {"text": "", "confidence": 0.0, "all_results": {}}
        
        # Pick the result with highest confidence
        best_result = max(results.values(), key=lambda x: x.get("confidence", 0.0))
        best_result["all_results"] = results
        return best_result
